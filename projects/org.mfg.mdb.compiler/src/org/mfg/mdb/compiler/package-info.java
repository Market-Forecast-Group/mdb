/**
 * <p>This package contains the compiler to transform the database schema definition into the set of Java files to manipulate the databases.</p>
 * <h2>Workflow</h2>
 * <p>MDB uses a compiler to transform a database schema definition into a set of Java files that the developer include in his project to handle the MDB databases.</p>
 * <p>This is the workflow of the MDB usage:</p>
 * <ul>
 * 	<li>Create a database schema</li>
 *  <li>Compile the schema</li>
 *  <li>Import the generated Java files into your project.</li>
 * </ul>
 * <h3>Create a database schema</h3>
 * <p>
 * The schema is very simple, it is formed by table definitions, each table definition contains column definitions.  
 * </p>
 * <p>
 * This is a visual representation of a schema defined in <a href="../../../../src-html/org/mfg/mdb/demo/Demo_02_SchemaDefinition.html#line.33">Demo 02: Simple schema definition</a>. 
 * </p>
 * Table: <b>Price</b>
 *  <table border=1>
 *  <caption>Price definition</caption>
 *	<tr>
 *		<td>Column</td>
 *		<td>Type</td>
 *		<td>Order</td>
 *		<td>Virtual</td>
 *		<td>Formula</td>
 *	</tr>
 * <tr>
 *		<td>time</td>
 *		<td>INTEGER</td>
 *		<td>ASCENDING</td>
 *		<td>No</td>
 *		<td></td>
 *	</tr>
 * <tr>
 *		<td>price</td>
 *		<td>LONG</td>
 *		<td>NONE</td>
 *		<td>No</td>
 *		<td></td>
 *	</tr>
 * </table>
 * <p>
 * The table contains the following elements.
 * </p>
 * <ul>
 * <li><b>Column</b>: the name of the column. This name should be a Java valid identifier because 
 * the same name is used in variables in the generated Java code.</li>
 * <li><b>Type</b>: the type of the column. It can be a primitive type or a compound type like array or String. 
 * This enum {@link org.mfg.mdb.compiler.Type} contains all the possible values.</li>
 * <li><b>Order</b>: the order of the values of this column, like ascendent or descendant or none. See {@link org.mfg.mdb.compiler.Order}. 
 * If you define a column as ordered you should be fully 
 * sure all values will respect that order, otherwise certain methods associated with binary searches do not work properly.</li>
 * <li><b>Virtual</b>: It is a flag to indicate if the column  is virtual or not. A virtual column is a column where the 
 * values are not saved in the database, else they are computed based on a Java formula.</li>
 * <li><b>Formula</b>: The formula used to compute the value of this column (in case this is a virtual column). The formula is a String with a Java valid expression.
 * In this expression you can use special identifiers like $$ and $pos$, this first will be expanded with the value of the current record, and the second with the the position of the current record. 
 * For example, if you want this column to have the half of the value of the "price" column, you can write a formula like: "$$.price / 2".
 * TODO [897587]: reference a demo of a virtual column.
 * </li>
 * </ul>
 * 
 * <h3>Compile the schema</h3>
 * 
 * <p>As we show in <a href="../../../../src-html/org/mfg/mdb/demo/Demo_02_SchemaDefinition.html#line.33">Demo 02</a> compile the schema is just one line of code.
 * You create an instance of the compiler and call the method "execute":</p>
 * <pre>
 * DemoCompiler demo = new DemoCompiler();
 * demo.compile("/path/to/project/src");
 * </pre>
 * <p>
 * Usually Java projects contains a special folder "src" where all the Java files are placed. The path to that folder is the one we call "/path/to/project/src" in the previous code. 
 * </p>
 * <p>
 * If your schema contains N tables, then N + 1 files are generated: one file per table (with the "MDB" prefix) and other file which represent the session (with the "MDBSession" prefix).
 * </p>
 * 
 * <h3>Import the generated files in your Java project</h3>
 * <p>
 * Since the files are copied into the "src" of your project you have to do practically nothing to include them, 
 * probably you only need to refresh the workspace of your Java IDE. One time you see these files in your project you will get a couple of compile errors,
 * it is because you need to add the MDB Runtime to the classpath.  
 * </p>
 * <p>
 * The MDB Runtime is distributed in a JAR file (org.mfg.mdb.runtime.jar) separately from the compiler JAR (org.mfg.mdb.compiler.jar).
 * You have to add that JAR to the classpath of your project and the errors will disappear.   
 * </p>
 * 
 * <h2>Preserving user code</h2>
 * <p>
 * MDB Compiler uses a template engine called <a href="../../../../org/mfg/mya/package-summary.html">MyA</a>. One of the features of this component is that 
 * it allows to preserve some code when a file overridden. If you open the files generated by the compiler there are comments like:
 * </p>
 * <pre>
 * /&lowast; BEGIN USER MDB &lowast;/
 * 
 * <b>/&lowast; User can insert his code here &lowast;/</b>
 * 
 * /&lowast; END USER MDB &lowast;/
 * </pre>
 * <p>
 * That comment means, that the developer can write its own code inside a generated file, and this code will be preserved if the compiler 
 * is executed again, if the file is overridden. This allow certain customization and extensibility of the generated code. For example you can add
 * helper methods or implement extra interfaces.
 * </p>
 * <p>
 * For more details about MyA go to its <a href="../../../../org/mfg/mya/package-summary.html">package overview</a>.
 * </p>
 * @author arian
 */
package org.mfg.mdb.compiler;