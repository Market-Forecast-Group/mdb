package $pkgname$;

import java.io.File;
import java.io.IOException;
import org.mfg.mdb.runtime.*;
import java.util.*;

//userText("/* BEGIN USER IMPORTS */", "/* END USER IMPORTS */", "\n/* User can insert his code here */\n");


// String schemaName = schema.getName();
public class $schemaName$MDBSession
// userText("/* BEGIN USER SESSION HINERITANCE */", "/* END USER SESSION HINERITANCE */", "\n\t\textends MDBSession\n");
 		{
 	
 	private static final Map<String,String> SIGNATURES;
 	private static final String SCHEMA_JSON = "$escape(schema.toJSONString())$";
 	
 	static {
 		SIGNATURES = new HashMap<>();
// for(Table t : schema) {		
		SIGNATURES.put("$t.getUUID().toString()$", "$t.computeSignature()$");
//	}	
 	}
 	
	public $schemaName$MDBSession(String sessionName, File root) throws IOException {
		super(sessionName, root, SIGNATURES, SCHEMA_JSON);
	}
	
	public $schemaName$MDBSession(String sessionName, File root, SessionMode mode) throws IOException {
		super(sessionName, root, mode, SIGNATURES, SCHEMA_JSON);
	}

// userText("/* BEGIN USER SESSION CODE */", "/* END USER SESSION CODE */", "\n/* The user can write his code here */\n");	
	
//	for(Table table : schema) {
//		String tableName = table.getName();
//		boolean hasArray = table.hasArray();

// if (hasArray) {
	private $tableName$MDB internal_connectTo_$tableName$MDB(File file, File arrayFile, int bufferSize) throws IOException {
	
		if (!file.getAbsolutePath().contains(getRoot().getAbsolutePath())) 
			throw new IllegalArgumentException("The file is not inside the database folder: " + file);
		if (!arrayFile.getAbsolutePath().contains(getRoot().getAbsolutePath())) 
			throw new IllegalArgumentException("The array file is not inside the database folder: " + arrayFile);
		if (!arrayFile.getParentFile().equals(file.getParentFile())) 
			throw new IllegalArgumentException("The array file is not in the same folder of the main file: " + arrayFile);
		if (!arrayFile.getPath().equals(file.getPath() + ".array"))
			throw new IllegalArgumentException("Illegal array file name: " + arrayFile);
// } else {
	private $tableName$MDB internal_connectTo_$tableName$MDB(File file, int bufferSize) throws IOException {
	
		if (!file.getAbsolutePath().contains(getRoot().getAbsolutePath())) 
			throw new IllegalArgumentException("The file is not inside the database folder: " + file);
//	}
	
		_readLock.lock();
		try {
			if (!_open) {
				throw new IOException("Trying to access a closed session.");
			}
				
			if (_cache.containsKey(file)) {
				return ($tableName$MDB) _cache.get(file);
			}
			$tableName$MDB mdb = new $tableName$MDB(this, file, arrayFile, bufferSize, getMode()); // if (hasArray) %
			$tableName$MDB mdb = new $tableName$MDB(this, file, bufferSize, getMode()); // else %		
			_cache.put(file, mdb);
			if (!_memory) {
				createFileMetadata(file, "$table.getUUID().toString()$");
			}
			return mdb;
		} finally {
			_readLock.unlock();
		}
	}

	public $tableName$MDB connectTo_$tableName$MDB(String filename, int bufferSize) throws IOException {	
//		if(hasArray) {	
		return internal_connectTo_$tableName$MDB(getFile(filename), getFile(filename + ".array"), bufferSize);
//		} else {
		return internal_connectTo_$tableName$MDB(getFile(filename), bufferSize);
//		}
	}
	
	public $tableName$MDB connectTo_$tableName$MDB(String filename) throws IOException {
		return connectTo_$tableName$MDB(filename, 100);
	}
//	}
//	emitExt(TARGET_SESSION_CLASS);	
}
